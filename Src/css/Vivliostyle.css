@charset "utf-8";

/* @page {
  margin-top: 3mm;
  margin-left: 3mm;
  margin-right: 3mm;
  margin-bottom: 5mm;

  @bottom-center {
    margin-bottom: 1.5mm;
    writing-mode: horizontal-tb;
    font-size: 8pt;
    content: counter(page);
  }
} */

/* @import url(Vivliostyle/A6-No_page.css); */
@import url(Vivliostyle/A7-No_page.css);
/* @import url(Vivliostyle/A6.css); */
/* @import url(Vivliostyle/A5.css); */
@import url(Report.css);

h1 {
  margin-top: 0.5em;
}

:root,
body {
  margin: 0 !important;
}

:root,
html,
body,
th {
  font-size: 8pt !important;
  line-height: 1.3 !important;
}

li > ol,
li > ul {
  margin-top: 0;
  padding-left: 0;
}

.Score,
.Scores,
.score,
.scores {
  display: block;
  font-weight: normal;
  font-size: 8pt;
  /* float: right; */
  text-align: right;
  font-style: italic;
}

.float {
  display: block;
  text-align: right;
}

/* title {
  string-set: title content();
} */

/*
img {
  */
/* to fit images in the page */
/*max-width: 100vw !important;
  max-height: 100vh !important;
}
*/

main {
  display: none;
}



.passage p {
  text-align: justify;
}

.passage ol {
  font-weight: 500;
}
.passage ol > li > ul {
  display: none;
}

.ans .passage ol {
  font-weight: bold;
}
.ans .passage ol > li > ul {
  font-weight: normal;
  display: block;
  list-style-type: none;
}

.ans .passage ol > li > ul > li::before {
  content: "उत्तर : ";
  font-weight: bold;
}

/* List Process */
ol[type="1"] ol[type="1"] {
  padding: 0;
  margin: 0;
}

ol[type="a"] {
  counter-reset: extend-lalpha;
  list-style: none;
}

ol[type="a"] li {
  counter-increment: extend-lalpha;
}

ol[type="a"] li::before {
  content: "(" counter(extend-lalpha, lower-alpha) ") ";
  /* font-weight: bold; */
}

ol[type="A"] {
  counter-reset: extend-ualpha;
  list-style: none;
}

ol[type="A"] li {
  counter-increment: extend-ualpha;
}

ol[type="A"] li::before {
  content: "(" counter(extend-ualpha, upper-alpha) ") ";
}

ol[type="i"] {
  counter-reset: extend-lroman;
  list-style: none;
}

ol[type="i"] li {
  counter-increment: extend-lroman;
}

ol[type="i"] li::before {
  content: "(" counter(extend-lroman, lower-roman) ") ";
}

ol[type="I"] {
  counter-reset: extend-uroman;
  list-style: none;
}

ol[type="I"] li {
  counter-increment: extend-uroman;
}

ol[type="I"] li::before {
  content: "(" counter(extend-uroman, upper-roman) ") ";
}
